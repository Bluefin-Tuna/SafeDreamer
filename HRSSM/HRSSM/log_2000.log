[2025-09-09 13:46:40] Starting training on port 2000...
[2025-09-09 13:46:40] Training command: python -u dreamer.py --task carla_right_turn_simple --logdir ./logdir/carla_right_turn_simple --configs carla
[2025-09-09 13:46:40] CARLA server is not running on port 2000. Starting or restarting...
[2025-09-09 13:46:40] Waiting for CARLA server to start on port 2000...
[2025-09-09 13:46:41] Waiting for CARLA server to start on port 2000...
[2025-09-09 13:46:42] Waiting for CARLA server to start on port 2000...
[2025-09-09 13:46:43] CARLA server is up and running on port 2000.
[2025-09-09 13:46:43] Training session started successfully. Logs are being written to: log_2000.log
/home/general/anaconda3/envs/hrssm_carla/lib/python3.10/site-packages/torch/utils/_pytree.py:185: FutureWarning: optree is installed but the version is too old to support PyTorch Dynamo in C++ pytree. C++ pytree support is disabled. Please consider upgrading optree using `python3 -m pip install --upgrade 'optree>=0.13.0'`.
  warnings.warn(
/home/general/anaconda3/envs/hrssm_carla/lib/python3.10/site-packages/kornia/feature/lightglue.py:30: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  @torch.cuda.amp.custom_fwd(cast_inputs=torch.float32)
2025-09-09 13:46:45.202244: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-09-09 13:46:45.230618: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
/home/general/anaconda3/envs/hrssm_carla/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.17.3 and <1.25.0 is required for this version of SciPy (detected version 1.26.4
  warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"
2025-09-09 13:46:45.901035: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Logdir logdir/carla_right_turn_simple
Create envs.
Namespace(ac_opt_eps=1e-05, act='SiLU', action_repeat=2, action_unimix_ratio=0.01, actor_dist='onehot', actor_entropy=0.0003, actor_grad_clip=100, actor_init_std=1.0, actor_layers=5, actor_lr=3e-05, actor_max_std=1.0, actor_min_std=0.1, actor_state_entropy=0.0, actor_temp=0.1, aug_prob=1.0, augmentation=(), batch_length=64, batch_size=12, behavior_stop_grad=True, block_size=4, break_speed=100.0, collect_dyn_sample=True, compile=True, cont_layers=5, cont_scale=1.0, dataset_size=100000, debug=False, decoder={'mlp_keys': '$^', 'cnn_keys': 'birdeye_wpt', 'act': 'SiLU', 'norm': 'LayerNorm', 'cnn_depth': 96, 'kernel_size': 4, 'minres': 4, 'mlp_layers': 5, 'mlp_units': 1024, 'cnn_sigmoid': False, 'image_dist': 'mse', 'vector_dist': 'symlog_mse'}, deterministic_run=True, device='cuda:0', disag_action_cond=False, disag_layers=4, disag_log=True, disag_models=10, disag_offset=1, disag_target='stoch', disag_units=400, discount=0.997, discount_lambda=0.95, distracting_cs_intensity=0.1, dyn_cell='gru_layer_norm', dyn_cont_stoch_size=32, dyn_deter=4096, dyn_discrete=32, dyn_hidden=1024, dyn_input_layers=1, dyn_mean_act='none', dyn_min_std=0.1, dyn_output_layers=1, dyn_rec_depth=1, dyn_scale=0.5, dyn_shared=False, dyn_std_act='sigmoid2', dyn_stoch=32, dyn_temp_post=True, encoder={'mlp_keys': '$^', 'cnn_keys': 'birdeye_wpt', 'act': 'SiLU', 'norm': 'LayerNorm', 'cnn_depth': 96, 'kernel_size': 4, 'minres': 4, 'mlp_layers': 5, 'mlp_units': 1024, 'symlog_inputs': True}, env={'world': {'carla_port': 2000}}, envs=1, eval_episode_num=5, eval_every=5000.0, eval_noise=0.0, eval_state_mean=False, evaldir=PosixPath('logdir/carla_right_turn_simple/eval_eps'), expl_amount=0.0, expl_behavior='greedy', expl_extr_scale=0.0, expl_gifs=False, expl_intr_scale=1.0, expl_until=0, future_entropy=False, grad_clip=1000, grad_heads=('reward', 'cont'), imag_gradient='dynamics', imag_gradient_mix=0.0, imag_horizon=15, imag_sample=True, initial='learned', kl_free=1.0, log_every=5000.0, logdir='./logdir/carla_right_turn_simple', mask_ratio=0.1, model_lr=0.0001, norm='LayerNorm', offline_evaldir='', offline_traindir='', opt='adam', opt_eps=1e-08, parallel=False, patch_size=10, precision=32, prefill=2500, pretrain=100, rep_scale=0.1, reset_every=0, reward_EMA=True, reward_head='symlog_disc', reward_layers=5, reward_scale=1.0, seed=0, size=(128, 128, 3), slow_target_fraction=0.02, slow_target_update=1, slow_value_target=True, steps=500000, task='carla_right_turn_simple', time_limit=250, train_ratio=512, traindir=PosixPath('logdir/carla_right_turn_simple/train_eps'), unimix_ratio=0.01, units=1024, value_decay=0.0, value_grad_clip=100, value_head='symlog_disc', value_layers=5, value_lr=3e-05, video_pred_log=False, videodir=PosixPath('logdir/carla_right_turn_simple/video'), weight_decay=0.0, wrapper={'length': 0, 'reset': True, 'discretize': 0, 'checks': False}, simsr_discount=0.99, dynamics_tau=0.05, encoder_tau=0.05, img_source='video', resource_files='../distractors/*.mp4', ds_resource_path='..', total_frames=1000, simsr_scale=1, mbr_scale=1, simple_log=False, nomlr=False, nosimsr=False, post_mlr=False)
[CARLA] Connecting to Carla server at 2000...
 * Serving Flask app 'car_dreamer.toolkit.monitor.monitor'
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:9000
 * Running on http://10.0.0.14:9000
Press CTRL+C to quit
[CARLA] Map Town03 loaded
[CARLA] Traffic Manager Port: 8000
